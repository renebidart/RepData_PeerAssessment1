install.packages('KernSmooth')
install.packages("KernSmooth")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
for (i in id){
x.i<-read.csv(directory/i.csv)
as.data.frame(x.i)
}
for (i in id){
x.i.pollutant <- na.omit(x.i$pollutant)
}
for (i in id){
pollutant.total<- paste(x.i.pollutant , pollutant.total, sep = '')
}
mean(pollutant.total)
}
pollutantmean(specdata, sulfate)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
for (i in id){
x.i<-read.csv(directory/i.csv)
as.data.frame(x.i)
}
for (i in id){
x.i.pollutant <- na.omit(x.i$pollutant)
}
for (i in id){
pollutant.total<- paste(x.i.pollutant , pollutant.total, sep = '')
}
mean(pollutant.total)
}
pollutantmean(specdata, sulfate)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
for (i in id){
x.i<-read.csv("directory/i.csv")
as.data.frame(x.i)
}
for (i in id){
x.i.pollutant <- na.omit(x.i$pollutant)
}
for (i in id){
pollutant.total<- paste(x.i.pollutant , pollutant.total, sep = '')
}
mean(pollutant.total)
}
pollutantmean(specdata, sulfate)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
for (i in id){
x.,i,<-read.csv("directory/,i,.csv")
as.data.frame(x.,i,)
}
for (i in id){
x.,i,.pollutant <- na.omit(x.,i,$pollutant)
}
for (i in id){
pollutant.total<- paste(x.,i,.pollutant , pollutant.total, sep = '')
}
mean(pollutant.total)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
for (i in id){
x.,i,<-read.csv("directory/,i,.csv")
as.data.frame(x.,i,)
}
for (i in id){
x.,i,.pollutant <- na.omit(x.,i,$pollutant)
}
for (i in id){
pollutant.total<- paste(x.,i,.pollutant , pollutant.total, sep = '')
}
mean(pollutant.total)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
for (i in id){
x.i<-read.csv("directory/i.csv")
as.data.frame(x.i)
}
for (i in id){
x.i.pollutant <- na.omit(x.i$pollutant)
}
for (i in id){
pollutant.total<- paste(x.i.pollutant , pollutant.total, sep = '')
}
mean(pollutant.total)
}
pollutantmean(specdata, sulfate)
for (i in id){
x.i<-read.csv("directory/i")
as.data.frame(x.i)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {for (i in id){
+     x.i<-read.csv("directory/i")
+     as.data.frame(x.i)
r
?mean
?
library(RPostgreSQL)
## loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
## Open a connection
con <- dbConnect(drv, dbname='advertising', user='postgres',
password='yourmachinepassword')
## Submits a statement
rs <- dbSendQuery(con, "select * from ageid")
## fetch all elements from the result set. you should get 6 rows back.
##You can play and retrieve other data from other tables.
fetch(rs,n=-1)
install.packages(‘som’)
install.packages("som")
library(som)
iris
som.init(iris, xdim=5, ydim=150, init="linear")
class(iris)
data<-iris[,1:4]
data
som.init(data, xdim=4, ydim=150, init="linear")
som(data, xdim=4, ydim=600)
som(data, xdim=4, ydim=150)
library(RPostgreSQL)
## loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
## Open a connection
con <- dbConnect(drv, dbname='advertising', user='postgres',
password='yourmachinepassword')
## Submits a statement
rs <- dbSendQuery(con, "select * from ageid")
## fetch all elements from the result set. you should get 6 rows back.
##You can play and retrieve other data from other tables.
fetch(rs,n=-1)
library(RPostgreSQL)
## loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
## Open a connection
con <- dbConnect(drv, dbname='advertising', user='postgres',
password='sasquatch')
## Submits a statement
rs <- dbSendQuery(con, "select * from ageid")
## fetch all elements from the result set. you should get 6 rows back.
##You can play and retrieve other data from other tables.
fetch(rs,n=-1)
dbDisconnect(con)
## Frees all the resources on the driver
dbUnloadDriver(drv)
library(RPostgreSQL)
library(kohonen)
library(somplot)
install.packages("kohonen")
install.packages("somplot")
library(kohonen)
library(somplot)
coolBlueHotRed <- function(n, alpha = 1) {
rainbow(n, end=4/6, alpha=alpha)[n:1]
}
pretty_palette <- c("#1f77b4","#ff7f0e","#2ca02c",
"#d62728","#9467bd","#8c564b","#e377c2")
##loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
## Opens a connection
con <- dbConnect(drv, dbname='advertising', user='postgres', password='sasquatch')
## Submits a statement
advertisingtable <- paste("select * from ",featuretable)
rs <- dbSendQuery(con, advertisingtable)
featuretable<-adid_age
featuretable<-"adid_age"
## Submits a statement
advertisingtable <- paste("select * from ",featuretable)
rs <- dbSendQuery(con, advertisingtable)
setwd("/Users/rene_b23/desktop/coursera/Exploratory data analysis")
rawData<-as.data.frame(read.table("./household_power_consumption.txt", header = TRUE, sep = ";"))
rawData$Global_active_power<-as.numeric(as.character(rawData$Global_active_power))
rawData$Global_reactive_power<-as.numeric(as.character(rawData$Global_reactive_power))
rawData$Voltage<-as.numeric(as.character(rawData$Voltage))
rawData$Global_intensity<-as.numeric(as.character(rawData$Global_intensity))
rawData$Sub_metering_1<-as.numeric(as.character(rawData$Sub_metering_1))
rawData$Sub_metering_2<-as.numeric(as.character(rawData$Sub_metering_2))
rawData$Sub_metering_3<-as.numeric(as.character(rawData$Sub_metering_3))
rawData[,1] <- as.Date(rawData[,1], "%d/%m/%Y")
##rawData$Time <- strptime(paste(rawData$Date, rawData$Time),format="%d/%m/%Y %H:%M:%S")
rawData$Time <- paste(rawData$Date, rawData$Time)
rawData$Time<- strptime(rawData$Time, format="%Y-%m-%d %H:%M:%S")
data <- subset(rawData, Date==as.Date("2007-02-01") | Date==as.Date("2007-02-02"))
plot(data$Time, data$Sub_metering_1,  ylab="Energy sub metering", type = "n")
lines(data$Time, data$Sub_metering_1, type="l",col="black")
lines(data$Time, data$Sub_metering_2, type="l",col="red")
lines(data$Time, data$Sub_metering_3, type="l",col="blue")
legend("topright",legend=c("sub_metering_1","sub_metering_2","sub_metering_3"),col=c("black","red","blue"),pt.cex=1,cex=.5)
dev.copy(png, file="multipleLine.png")
dev.off()
setwd("/Users/rene_b23/desktop/coursera/Exploratory data analysis")
rawData<-as.data.frame(read.table("./household_power_consumption.txt", header = TRUE, sep = ";"))
rawData$Global_active_power<-as.numeric(as.character(rawData$Global_active_power))
rawData$Global_reactive_power<-as.numeric(as.character(rawData$Global_reactive_power))
rawData$Voltage<-as.numeric(as.character(rawData$Voltage))
rawData$Global_intensity<-as.numeric(as.character(rawData$Global_intensity))
rawData$Sub_metering_1<-as.numeric(as.character(rawData$Sub_metering_1))
rawData$Sub_metering_2<-as.numeric(as.character(rawData$Sub_metering_2))
rawData$Sub_metering_3<-as.numeric(as.character(rawData$Sub_metering_3))
rawData[,1] <- as.Date(rawData[,1], "%d/%m/%Y")
##rawData$Time <- strptime(paste(rawData$Date, rawData$Time),format="%d/%m/%Y %H:%M:%S")
rawData$Time <- paste(rawData$Date, rawData$Time)
rawData$Time<- strptime(rawData$Time, format="%Y-%m-%d %H:%M:%S")
data <- subset(rawData, Date==as.Date("2007-02-01") | Date==as.Date("2007-02-02"))
hist(data$Global_active_power, xlab="Global Active Power (Kilowatts)", col="red", main="Global Active Power")
dev.copy(png, file="plot1.png")
dev.off()
setwd("/Users/rene_b23/desktop/coursera/Exploratory data analysis")
rawData<-as.data.frame(read.table("./household_power_consumption.txt", header = TRUE, sep = ";"))
rawData$Global_active_power<-as.numeric(as.character(rawData$Global_active_power))
rawData$Global_reactive_power<-as.numeric(as.character(rawData$Global_reactive_power))
rawData$Voltage<-as.numeric(as.character(rawData$Voltage))
rawData$Global_intensity<-as.numeric(as.character(rawData$Global_intensity))
rawData$Sub_metering_1<-as.numeric(as.character(rawData$Sub_metering_1))
rawData$Sub_metering_2<-as.numeric(as.character(rawData$Sub_metering_2))
rawData$Sub_metering_3<-as.numeric(as.character(rawData$Sub_metering_3))
rawData[,1] <- as.Date(rawData[,1], "%d/%m/%Y")
##rawData$Time <- strptime(paste(rawData$Date, rawData$Time),format="%d/%m/%Y %H:%M:%S")
rawData$Time <- paste(rawData$Date, rawData$Time)
rawData$Time<- strptime(rawData$Time, format="%Y-%m-%d %H:%M:%S")
data <- subset(rawData, Date==as.Date("2007-02-01") | Date==as.Date("2007-02-02"))
plot(data$Time, data$Global_active_power, xlab="",
ylab="Global Active Power (Kilowatts)", type="l")
dev.copy(png, file="plot2.png")
dev.off()
setwd("/Users/rene_b23/desktop/coursera/Exploratory data analysis")
rawData<-as.data.frame(read.table("./household_power_consumption.txt", header = TRUE, sep = ";"))
rawData$Global_active_power<-as.numeric(as.character(rawData$Global_active_power))
rawData$Global_reactive_power<-as.numeric(as.character(rawData$Global_reactive_power))
rawData$Voltage<-as.numeric(as.character(rawData$Voltage))
rawData$Global_intensity<-as.numeric(as.character(rawData$Global_intensity))
rawData$Sub_metering_1<-as.numeric(as.character(rawData$Sub_metering_1))
rawData$Sub_metering_2<-as.numeric(as.character(rawData$Sub_metering_2))
rawData$Sub_metering_3<-as.numeric(as.character(rawData$Sub_metering_3))
rawData[,1] <- as.Date(rawData[,1], "%d/%m/%Y")
##rawData$Time <- strptime(paste(rawData$Date, rawData$Time),format="%d/%m/%Y %H:%M:%S")
rawData$Time <- paste(rawData$Date, rawData$Time)
rawData$Time<- strptime(rawData$Time, format="%Y-%m-%d %H:%M:%S")
data <- subset(rawData, Date==as.Date("2007-02-01") | Date==as.Date("2007-02-02"))
plot(data$Time, data$Sub_metering_1,  ylab="Energy sub metering", type = "n")
lines(data$Time, data$Sub_metering_1, type="l",col="black")
lines(data$Time, data$Sub_metering_2, type="l",col="red")
lines(data$Time, data$Sub_metering_3, type="l",col="blue")
legend("topright",legend=c("sub_metering_1","sub_metering_2","sub_metering_3"),col=c("black","red","blue"),pt.cex=1,cex=.5)
dev.copy(png, file="plot3.png")
dev.off()
setwd("/Users/rene_b23/desktop/coursera/Exploratory data analysis")
rawData<-as.data.frame(read.table("./household_power_consumption.txt", header = TRUE, sep = ";"))
rawData$Global_active_power<-as.numeric(as.character(rawData$Global_active_power))
rawData$Global_reactive_power<-as.numeric(as.character(rawData$Global_reactive_power))
rawData$Voltage<-as.numeric(as.character(rawData$Voltage))
rawData$Global_intensity<-as.numeric(as.character(rawData$Global_intensity))
rawData$Sub_metering_1<-as.numeric(as.character(rawData$Sub_metering_1))
rawData$Sub_metering_2<-as.numeric(as.character(rawData$Sub_metering_2))
rawData$Sub_metering_3<-as.numeric(as.character(rawData$Sub_metering_3))
rawData[,1] <- as.Date(rawData[,1], "%d/%m/%Y")
##rawData$Time <- strptime(paste(rawData$Date, rawData$Time),format="%d/%m/%Y %H:%M:%S")
rawData$Time <- paste(rawData$Date, rawData$Time)
rawData$Time<- strptime(rawData$Time, format="%Y-%m-%d %H:%M:%S")
data <- subset(rawData, Date==as.Date("2007-02-01") | Date==as.Date("2007-02-02"))
par(mfrow=c(2,2))
plot(data$Time, data$Global_active_power, xlab="",
ylab="Global Active Power (Kilowatts)", type="l")
plot(data$Time, data$Global_active_power, xlab="",
ylab="Global Active Power (Kilowatts)", type="l")
plot(data$Time, data$Sub_metering_1,  ylab="Energy sub metering", type = "n")
lines(data$Time, data$Sub_metering_1, type="l",col="black")
lines(data$Time, data$Sub_metering_2, type="l",col="red")
lines(data$Time, data$Sub_metering_3, type="l",col="blue")
legend("topright",legend=c("sub_metering_1","sub_metering_2","sub_metering_3"),col=c("black","red","blue"),pt.cex=1,cex=.1)
plot(data$Time, data$Global_reactive_power, xlab="datetime", type="l")
dev.copy(png, file="plot4.png")
dev.off()
pnorm(.95, mean = 1100, sd = 75,)
qnorm(.95, mean = 1100, sd = 75,)
dbinom(4, 5, .5, log = FALSE)
dbinom(5, 5, .5, log = FALSE)
pnorm(14, 15, sd = 10,)
pnorm(16, 15, sd = 10,)
pnorm(25, 15, sd = 10,)
pnorm(15, 15, sd = 10,)
pnorm(14, 15, sd = 1,)
pnorm(16, 15, sd = 10,)
pnorm(16, 15, sd = 1,)
dpois(x, lambda, log = FALSE)
dpois(3, 5)
dpois(10, 15)
dpois(15, 15)
qnorm(.95, mean = 1100, sd = 75)
qnorm(.95, mean = 1100, sd = 7.5)
pnorm(16, 15, sd = 1,)
pnorm(14, 15, sd = 1,)
pnorm(14, 15, sd = 110)
pnorm(14, 15, sd = 10)
pnorm(16, 15, sd = 10)
ppois(10, lambda=15)
dt(.05, 8)
dt(x=c(.05,.95), 8)
dt(x=c(.05,.95), df=8)
install.packages("knitr")
library(knitr)
setwd("/Users/rene_b23/desktop/coursera/Reproducable Research/RepData_PeerAssessment1")
data<-as.data.frame(read.csv("./activity.csv"))
head(data)
dim(data)
mean(data$steps)
mean(na.omit(data$steps)
mean(na.omit(data$steps))
mean(na.omit(data$steps))
median(na.omit(data$steps))
head(data, obs=200)
data
head(data)
aggregate(. ~ interval, data=data, FUN=sum)
a[which.max(a$steps), a$interval]
a<-aggregate(. ~ interval, data=data, FUN=sum)
plot(a$interval, a$steps, xlab="interval",
ylab="steps", type="l")
a[which.max(a$steps), a$interval]
which.max(a$steps)
a[which.max(a$steps),1 ]
sum(is.na(data(steps)))
sum(is.na(data$steps))
head(data)
head(a)
for i in 1:nrow(data){
if(is.na(data[i, 1]){
data[i, 1]<-a[which(a$interval==data[i,3]),2]
}
}
for() i in 1:nrow(data)){
if(is.na(data[i, 1]){
data[i, 1]<-a[which(a$interval==data[i,3]),2]
}
}
for( i in 1:nrow(data)){
if(is.na(data[i, 1]){
data[i, 1]<-a[which(a$interval==data[i,3]),2]
}
}
for( i in 1:nrow(data)) {
if(is.na(data[i, 1]){
data[i, 1]<-a[which(a$interval==data[i,3]),2]
}
}
if(is.na(data[i, 1]){
data[i, 1]<-a[which(a$interval==data[i,3]),2]
for( i in 1:nrow(data)) {
if(is.na(data[i, 1]) data[i, 1]<-a[which(a$interval==data[i,3]),2]
}
